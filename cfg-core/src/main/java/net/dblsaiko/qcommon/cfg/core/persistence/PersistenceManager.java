package net.dblsaiko.qcommon.cfg.core.persistence;

import net.dblsaiko.qcommon.cfg.core.ConfigApiImpl;
import net.dblsaiko.qcommon.cfg.core.api.ExecSource;
import net.dblsaiko.qcommon.cfg.core.api.LinePrinter;
import net.dblsaiko.qcommon.cfg.core.api.persistence.PersistenceContext;
import net.dblsaiko.qcommon.cfg.core.api.persistence.PersistenceListener;
import net.dblsaiko.qcommon.cfg.core.cmdproc.CommandDispatcher;
import net.fabricmc.loader.api.FabricLoader;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;
import java.util.function.Consumer;

public class PersistenceManager {

    private final Set<PersistenceListener> listeners = new HashSet<>();
    private final CommandDispatcher dispatcher;

    public PersistenceManager(CommandDispatcher dispatcher) {
        this.dispatcher = dispatcher;
    }

    public void addListener(PersistenceListener listener) {
        listeners.add(listener);
    }

    public void save() {
        Map<String, Set<Consumer<LinePrinter>>> map = new HashMap<>();
        PersistenceContext persistenceContext = (file, function) -> map.computeIfAbsent(file, _file -> new HashSet<>()).add(function);
        listeners.forEach($ -> $.write(persistenceContext));

        Path configDir = FabricLoader.getInstance().getConfigDirectory().toPath();

        map.forEach((file, functions) -> {
            Path filePath = configDir.resolve(String.format("%s.cfg", file));

            if (filePath.startsWith(configDir)) {
                List<String> lines = new ArrayList<>();
                LinePrinter output = s -> lines.addAll(Arrays.asList(s.split("\n")));

                output.printf("// File: %s.cfg", file);
                output.printf("// Generated by qcommon-cfg.");
                output.print();
                functions.forEach($ -> $.accept(output));

                try {
                    Files.createDirectories(filePath.getParent());
                    Files.write(filePath, lines, StandardCharsets.UTF_8);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    public void load() {
        Set<String> files = new HashSet<>();
        PersistenceContext persistenceContext = (file, _function) -> files.add(file);
        listeners.forEach($ -> $.write(persistenceContext));
        files.forEach(file -> dispatcher.exec(String.format("exec %s", ConfigApiImpl.INSTANCE.escape(file)), ExecSource.EVENT));
    }

}
