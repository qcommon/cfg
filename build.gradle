import static org.gradle.api.JavaVersion.VERSION_1_8

plugins {
    id 'fabric-loom' version '0.2.7-SNAPSHOT' apply false
}

version = cfg_version

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'fabric-loom'

    java {
        sourceCompatibility = VERSION_1_8
        targetCompatibility = VERSION_1_8
    }

    group = 'net.dblsaiko.qcommon.cfg'

    dependencies {
        minecraft group: 'com.mojang', name: 'minecraft', version: minecraft_version
        mappings group: 'net.fabricmc', name: 'yarn', version: mappings_version, classifier: 'v2'
        modCompile group: 'net.fabricmc', name: 'fabric-loader', version: loader_version

        modCompile group: 'net.fabricmc.fabric-api', name: 'fabric-api', version: fabric_api_version

        implementation group: 'org.jetbrains', name: 'annotations', version: '18.0.0'
    }

    configurations {
        dev
    }

    repositories {
    }

    afterEvaluate {
        artifacts {
            dev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar"), type: 'jar', builtBy: remapJar
        }

        processResources {
            inputs.property 'version', project.version

            from(sourceSets.main.resources.srcDirs) {
                include 'fabric.mod.json'
                expand 'version': project.version
            }

            from(sourceSets.main.resources.srcDirs) {
                exclude 'fabric.mod.json'
            }
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    apply from: 'https://raw.githubusercontent.com/2xsaiko/gradle-tools/master/publish/publish-slim.gradle'
}

subprojects {
    archivesBaseName = "cfg-${name}"

    task remapMavenJar(type: Copy, dependsOn: remapJar) {
        afterEvaluate {
            from("${project.buildDir}/libs/$archivesBaseName-${version}.jar")
            into("${project.buildDir}/libs/")
            rename { String fn -> "$archivesBaseName-${version}-maven.jar" }
        }
    }

    afterEvaluate {
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    artifact(file("${project.buildDir}/libs/$archivesBaseName-${project.version}-maven.jar")) {
                        builtBy remapMavenJar
                    }
                    artifact(sourcesJar) {
                        builtBy remapSourcesJar
                    }
                }
            }
        }
    }
}

task remapMavenJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: jar) {
    afterEvaluate {
        input = file("${project.buildDir}/libs/${archivesBaseName}-${version}-dev.jar")
        archiveName = "${archivesBaseName}-${version}-maven.jar"
        addNestedDependencies = false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(file("${project.buildDir}/libs/$archivesBaseName-${project.version}-maven.jar")) {
                builtBy remapMavenJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
            pom.withXml {
                def buildid = System.getenv("PUBLISH_BUILD")

                def depsNode = asNode().appendNode("dependencies")
                subprojects.each {
                    def depNode = depsNode.appendNode("dependency")
                    depNode.appendNode("groupId", it.group)
                    depNode.appendNode("artifactId", it.name)
                    depNode.appendNode("version", buildid != null ? "${it.version}-${buildid}":it.version)
                    depNode.appendNode("scope", "compile")
                }
            }
        }
    }
}

subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }

repositories {
    maven { url = 'https://maven.dblsaiko.net' }
}

dependencies {
    modRuntime group: 'net.dblsaiko', name: 'winwonders', version: '0.1.1-3'
    modRuntime group: 'io.github.prospector', name: 'modmenu', version: '1.8.5+build.23'

    afterEvaluate {
        subprojects.each {
            compile project(path: ":${it.name}", configuration: "dev")
            include project("${it.name}:")
        }
    }
}
